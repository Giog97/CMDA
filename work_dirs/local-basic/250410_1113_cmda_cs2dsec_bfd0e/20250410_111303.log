2025-04-10 11:13:03,336 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_12.2.r12.2/compiler.33191640_0
GCC: gcc (conda-forge gcc 8.5.0-19) 8.5.0
PyTorch: 1.7.1+cu110
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2+cu110
OpenCV: 4.4.0
MMCV: 1.3.7
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 12.2
MMSegmentation: 0.16.0+c333c6e
------------------------------------------------------------

2025-04-10 11:13:03,337 - mmseg - INFO - Distributed training: False
2025-04-10 11:13:03,690 - mmseg - INFO - Config:
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    type='FusionEncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='ResNetV1c',
        depth=18,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 2, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch'),
    decode_head=dict(
        type='DAFormerHeadFusion',
        in_channels=[64, 128, 256, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        decoder_params=dict(
            embed_dims=256,
            embed_cfg=dict(
                type='ConvModule',
                kernel_size=1,
                norm_cfg=dict(type='BN', requires_grad=True)),
            embed_neck_cfg=dict(
                type='ConvModule',
                kernel_size=1,
                norm_cfg=dict(type='BN', requires_grad=True)),
            train_type='cs2dsec_image+events_together',
            share_decoder=True,
            half_share_decoder=False),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=256,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(
        work_dir='work_dirs/local-basic/250410_1113_cmda_cs2dsec_bfd0e'),
    test_cfg=dict(mode='whole'),
    backbone_image=dict(
        type='ResNetV1c',
        depth=18,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 2, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch'),
    backbone_events=dict(
        type='ResNetV1c',
        depth=18,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 2, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch'),
    fusion_module=dict(type='AttentionAvgFusion'),
    fusion_isr_module=dict(type=''),
    train_type='cs2dsec_image+events_together')
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='UDADataset',
        source=dict(
            type='CityscapesICDataset',
            image_resize_size=(1024, 512),
            image_crop_size=[512, 512],
            dataset_path='./data/cityscapes/',
            outputs={'image', 'img_self_res', 'label', 'img_time_res'},
            return_GI_or_IC='image_change',
            shift_type='random',
            isr_noise=False,
            isr_cow_mask=False,
            high_resolution_isr=False,
            random_flare=None,
            cs_isr_data_type='day',
            shift_3_channel=False,
            isr_parms=''),
        target=dict(
            type='DSECDataset',
            dataset_txt_path='./night_dataset_warp.txt',
            crop_size=[400, 400],
            after_crop_resize_size=[512, 512],
            outputs={'warp_image', 'warp_img_self_res', 'events_vg'},
            events_bins=1,
            isr_type='real_time',
            shift_type='random',
            isr_parms=dict(
                val_range=[0.01, 1.01],
                _threshold=0.005,
                _clip_range=0.1,
                shift_pixel=1),
            events_clip_range=None,
            events_bins_5_avg_1=False,
            image_change_range=1),
        source_json_root='./data/cityscapes/',
        rare_class_sampling=dict(
            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),
    val=dict(
        type='DSECDataset',
        dataset_txt_path='./night_test_dataset_warp.txt',
        outputs=['img_metas', 'label', 'warp_image', 'events_vg'],
        events_bins=1,
        events_clip_range=None,
        events_bins_5_avg_1=False,
        image_change_range=1),
    test=dict(
        type='DSECDataset',
        dataset_txt_path='./night_test_dataset_warp.txt',
        outputs=['img_metas', 'label', 'warp_image', 'events_vg'],
        events_bins=1,
        events_clip_range=None,
        events_bins_5_avg_1=False,
        image_change_range=1))
uda = dict(
    type='DACS',
    alpha=0.999,
    pseudo_threshold=0.968,
    pseudo_weight_ignore_top=0,
    pseudo_weight_ignore_bottom=0,
    imnet_feature_dist_lambda=0,
    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],
    imnet_feature_dist_scale_min_ratio=0.75,
    mix='class',
    blur=True,
    color_jitter_strength=0.2,
    color_jitter_probability=0.2,
    debug_img_interval=500,
    print_grad_magnitude=False,
    cyclegan_itrd2en_path='./pretrained/cityscapes_ICD_to_dsec_EN.pth',
    img_self_res_reg='no',
    train_type='cs2dsec_image+events_together',
    forward_cfg=dict(
        loss_weight=dict(image=0.5, events=0.5, fusion=0.5, img_self_res=0.25),
        gradual_rate=0.0),
    mixed_image_to_mixed_isr=True,
    random_choice_thres='0.5',
    shift_type='random',
    isr_parms=dict(
        val_range=[0.01, 1.01],
        _threshold=0.005,
        _clip_range=0.1,
        shift_pixel=1),
    isr_mix_aug=False,
    sky_mask=None,
    deflare_aug=False,
    isr_edge=False,
    lambda_isr_features=-1,
    isr_edge_class_weight=-1,
    isr_noise_dacs_type='',
    shift_3_channel=False,
    isr_no_fusion=False,
    lambda_feature_consistency=-1,
    isr_another_fusion=False,
    without_events=False,
    without_isd=False,
    fuse_both_ice_and_e=False)
use_ddp_wrapper = True
optimizer = dict(
    type='AdamW',
    lr=6e-05,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            head=dict(lr_mult=10.0),
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = None
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
seed = 0
pretrained_type = 'mit_b5'
events_bins = 1
train_type = 'cs2dsec_image+events_together'
n_gpus = 1
runner = dict(type='IterBasedRunner', max_iters=40000)
checkpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)
evaluation = dict(interval=4000, metric='mIoU')
name = '250410_1113_cmda_cs2dsec_bfd0e'
exp = 'basic'
name_dataset = 'cityscapes_day2dsec_night'
name_encoder = 'resnet18'
name_architecture = 'daformer_sepaspp_resnet18'
name_decoder = 'daformer_sepaspp_events'
name_uda = 'dacs_a999_rcs0.01_cpl'
name_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'
work_dir = 'work_dirs/local-basic/250410_1113_cmda_cs2dsec_bfd0e'
git_rev = 'c333c6eeb67b42379ea02e6381366f07e369f6b9'
gpu_ids = range(0, 1)

2025-04-10 11:13:03,690 - mmseg - INFO - Set random seed to 0, deterministic: False
